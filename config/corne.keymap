#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>

/*           42 KEY MATRIX / LAYOUT MAPPING
  ╭────────────────────────┬────────────────────────╮
  │  0   1   2   3   4   5 │  6   7   8   9  10  11 │
  │ 12  13  14  15  16  17 │ 18  19  20  21  22  23 │
  │ 24  25  26  27  28  29 │ 30  31  32  33  34  35 │
  ╰───────────╮ 36  37  38 │ 39  40  41 ╭───────────╯
              ╰────────────┴────────────╯            */

#define KEYS_L 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38
#define KEYS_R 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41
#define THUMBS 36 37 38 39 40 41
#define SUPER LS(LA(LC(LCMD)))
#define BSE_L 0
#define CMK_L 1
#define GME_L 2
#define RGT_L 3
#define LFT_L 4
#define FUN_L 5

/ {
    behaviors {
        bspc_del: bspc_del {
            compatible = "zmk,behavior-mod-morph";
            label = "BSPC_DEL";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&kp DEL>;

            mods = <(MOD_LSFT)>;
        };

        comma_semi: comma_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SEMI";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;

            mods = <(MOD_LSFT)>;
        };

        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COLON";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;

            mods = <(MOD_LSFT)>;
        };

        qmrk_excl: qmrk_excl {
            compatible = "zmk,behavior-mod-morph";
            label = "QUESTION_EXCLAMATION";
            #binding-cells = <0>;
            bindings = <&kp QMARK>, <&kp EXCL>;

            mods = <(MOD_LSFT)>;
        };

        slh_morph: slh_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "SLASH_MORPH";
            #binding-cells = <0>;
            bindings = <&kp FSLH>, <&kp BSLH>;

            mods = <(MOD_LSFT)>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Fn_Layer {
            if-layers = <3 4>;
            then-layer = <5>;
        };
    };

    macros {
        email: email {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp T &kp H &kp O &kp M &kp A &kp S &kp A &kp L &kp B &kp A &kp N &kp M &kp U &kp S &kp I &kp C &kp AT &kp G &kp M &kp A &kp I &kp L &kp DOT &kp C &kp O &kp M>;
            label = "EMAIL";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            label = "Base";
            bindings = <
&kp PLUS                  &kp Q  &kp W  &kp E  &kp R      &kp T        &kp Y    &kp U      &kp I        &kp O       &kp P       &kp EQUAL
&mt LS(LA(LC(LGUI))) ESC  &kp A  &kp S  &kp D  &kp F      &kp G        &kp H    &kp J      &kp K        &kp L       &kp APOS    &slh_morph
&kp MINUS                 &kp Z  &kp X  &kp C  &kp V      &kp B        &kp N    &kp M      &comma_semi  &dot_colon  &qmrk_excl  &kp UNDER
                                        &mo 3  &kp SPACE  &kp LSHFT    &kp RET  &bspc_del  &mo 4
            >;
        };

        Colemak {
            label = "Colemak";
            bindings = <
&kp PLUS                  &kp Q  &kp W  &kp F  &kp P      &kp B        &kp J    &kp L      &kp U        &kp Y       &kp APOS    &kp EQUAL
&mt LS(LA(LC(LGUI))) ESC  &kp A  &kp R  &kp S  &kp T      &kp G        &kp M    &kp N      &kp E        &kp I       &kp O       &slh_morph
&kp MINUS                 &kp Z  &kp X  &kp C  &kp D      &kp V        &kp K    &kp H      &comma_semi  &dot_colon  &qmrk_excl  &kp UNDER
                                        &mo 3  &kp SPACE  &kp LSHFT    &kp RET  &bspc_del  &mo 4
            >;
        };

        Game {
            label = "Game";
            bindings = <
&kp ESC    &kp Q  &kp W  &kp E     &kp R      &kp T       &kp Y    &kp U      &kp I      &kp O    &kp P     &to 0
&kp TAB    &kp A  &kp S  &kp D     &kp F      &kp G       &kp H    &kp J      &kp K      &kp L    &kp SEMI  &mo 3
&kp LSHFT  &kp Z  &kp X  &kp C     &kp V      &kp B       &kp N    &kp M      &kp COMMA  &kp DOT  &kp FSLH  &mo 4
                         &kp LALT  &kp SPACE  &kp LCMD    &kp RET  &bspc_del  &kp LCTRL
            >;
        };

        Left {
            label = "Left";
            bindings = <
&none  &kp PIPE       &kp AT    &kp POUND  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS  &kp ASTRK  &kp GRAVE  &kp TILDE         &none
&none  &kp LESS_THAN  &kp LBKT  &kp LBRC   &kp LPAR  &none        &none      &kp RPAR  &kp RBRC   &kp RBKT   &kp GREATER_THAN  &none
&none  &none          &none     &none      &none     &none        &none      &none     &none      &none      &none             &none
                                &none      &none     &none        &none      &none     &none
            >;
        };

        Right {
            label = "Right";
            bindings = <
&none                 &kp N1     &kp N2    &kp N3    &kp N4   &kp N5    &kp N6  &kp N7    &kp N8     &kp N9     &kp N0     &tog 2
&sk LS(LA(LC(LGUI)))  &sk LCTRL  &sk LALT  &sk LCMD  &kp TAB  &none     &none   &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &tog 1
&none                 &none      &none     &none     &email   &none     &none   &kp HOME  &kp PG_DN  &kp PG_UP  &kp END    &none
                                           &none     &none    &none     &none   &none     &none
            >;
        };

        Func {
            label = "Func";
            bindings = <
&none  &kp F1  &kp F2   &kp F3   &kp F4   &none    &none  &kp C_VOL_UP  &kp C_NEXT        &kp C_BRI_UP       &bt BT_NXT  &none
&none  &kp F5  &kp F6   &kp F7   &kp F8   &none    &none  &kp C_VOL_DN  &kp C_PLAY_PAUSE  &kp C_BRI_DN       &bt BT_PRV  &none
&none  &kp F9  &kp F10  &kp F11  &kp F12  &none    &none  &kp C_MUTE    &kp C_PREV        &ext_power EP_TOG  &bt BT_CLR  &none
                        &none    &none    &none    &none  &none         &none
            >;
        };
    };
};
