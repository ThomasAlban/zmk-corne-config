#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        bspc_del: bspc_del {
            compatible = "zmk,behavior-mod-morph";
            label = "BSPC_DEL";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&kp DEL>;

            mods = <(MOD_LSFT)>;
        };

        comma_semi: comma_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SEMI";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;

            mods = <(MOD_LSFT)>;
        };

        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COLON";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;

            mods = <(MOD_LSFT)>;
        };

        qmrk_excl: qmrk_excl {
            compatible = "zmk,behavior-mod-morph";
            label = "QUESTION_EXCLAMATION";
            #binding-cells = <0>;
            bindings = <&kp QMARK>, <&kp EXCL>;

            mods = <(MOD_LSFT)>;
        };

        slh_morph: slh_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "SLASH_MORPH";
            #binding-cells = <0>;
            bindings = <&kp FSLH>, <&kp BSLH>;

            mods = <(MOD_LSFT)>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;
        };

        hold_bspc: hold_bspc {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_BSPC";
            bindings = <&kp>, <&bspc_del>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        func_layer {
            if-layers = <3 5>;
            then-layer = <6>;
        };
    };

    macros {
        email: email {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp T &kp H &kp O &kp M &kp A &kp S &kp A &kp L &kp B &kp A &kp N &kp M &kp U &kp S &kp I &kp C &kp AT &kp G &kp M &kp A &kp I &kp L &kp DOT &kp C &kp O &kp M>;
            label = "EMAIL";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            label = "Base";
            bindings = <
&kp PLUS                  &kp Q  &kp W         &kp E        &kp R        &kp T        &kp Y      &kp U        &kp I        &kp O         &kp P       &kp EQUAL
&mt LS(LA(LC(LGUI))) ESC  &kp A  &hml LCTRL S  &hml LALT D  &hml LGUI F  &kp G        &kp H      &hmr RGUI J  &hmr RALT K  &hmr RCTRL L  &kp APOS    &slh_morph
&kp MINUS                 &kp Z  &kp X         &kp C        &kp V        &kp B        &kp N      &kp M        &comma_semi  &dot_colon    &qmrk_excl  &kp UNDER
                                               &mo 3        &kp SPACE    &kp LSHFT    &kp ENTER  &bspc_del    &mo 4
            >;
        };

        Colemak {
            label = "Colemak";
            bindings = <
&kp PLUS                  &kp Q  &kp W         &kp F        &kp P        &kp B        &kp J    &kp L        &kp U        &kp Y         &kp APOS    &kp EQUAL
&mt LS(LA(LC(LGUI))) ESC  &kp A  &hml LCTRL R  &hml LALT S  &hml LGUI T  &kp G        &kp M    &hmr RGUI N  &hmr LALT E  &hmr LCTRL I  &kp O       &slh_morph
&kp MINUS                 &kp Z  &kp X         &kp C        &kp D        &kp V        &kp K    &kp H        &comma_semi  &dot_colon    &qmrk_excl  &kp UNDER
                                               &mo 3        &kp SPACE    &kp LSHFT    &kp RET  &bspc_del    &lt 4 TAB
            >;
        };

        Game {
            label = "Game";
            bindings = <
&kp ESC    &kp Q  &kp W  &kp E     &kp R      &kp T       &kp Y    &kp U      &kp I      &kp O    &kp P     &to 0
&kp TAB    &kp A  &kp S  &kp D     &kp F      &kp G       &kp H    &kp J      &kp K      &kp L    &kp SEMI  &mo 3
&kp LSHFT  &kp Z  &kp X  &kp C     &kp V      &kp B       &kp N    &kp M      &kp COMMA  &kp DOT  &kp FSLH  &mo 5
                         &kp LALT  &kp SPACE  &kp LCMD    &kp RET  &bspc_del  &kp LCTRL
            >;
        };

        Left {
            label = "Left";
            bindings = <
&none  &kp PIPE       &kp AT    &kp POUND  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS  &kp ASTRK  &kp GRAVE  &kp TILDE         &none
&none  &kp LESS_THAN  &kp LBKT  &kp LBRC   &kp LPAR  &none        &none      &kp RPAR  &kp RBRC   &kp RBKT   &kp GREATER_THAN  &none
&none  &none          &none     &none      &none     &none        &none      &none     &none      &none      &none             &none
                                &trans     &trans    &trans       &trans     &trans    &trans
            >;
        };

        Right {
            label = "Right";
            bindings = <
&none                 &kp N1  &kp N2     &kp N3    &kp N4    &kp N5    &kp N6  &kp N7    &kp N8     &kp N9     &kp N0     &tog 2
&sk LS(LA(LC(LGUI)))  &none   &sk LCTRL  &sk LALT  &sk LGUI  &none     &none   &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &tog 1
&none                 &none   &none      &none     &email    &none     &none   &kp HOME  &kp PG_DN  &kp PG_UP  &kp END    &none
                                         &trans    &trans    &trans    &trans  &trans    &trans
            >;
        };

        Func {
            label = "Func";
            bindings = <
&none  &kp F1  &kp F2   &kp F3   &kp F4   &none     &none   &kp C_VOL_UP  &kp C_NEXT        &kp C_BRI_UP       &bt BT_NXT  &none
&none  &kp F5  &kp F6   &kp F7   &kp F8   &none     &none   &kp C_VOL_DN  &kp C_PLAY_PAUSE  &kp C_BRI_DN       &bt BT_PRV  &none
&none  &kp F9  &kp F10  &kp F11  &kp F12  &none     &none   &kp C_MUTE    &kp C_PREV        &ext_power EP_TOG  &bt BT_CLR  &none
                        &trans   &trans   &trans    &trans  &trans        &trans
            >;
        };
    };
};
