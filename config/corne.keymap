  /*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>
#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/keypos_def/keypos_42keys.h"

/* use helper macros to define left and right hand keys */
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5  // left-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5  // right-hand keys
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2 RM0                                   // thumb keys

/* left-hand HRMs */
ZMK_BEHAVIOR(hml, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)

/* right-hand HRMs */
ZMK_BEHAVIOR(hmr, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)

&led_strip { chain-length = <27>; }; 

/ {
    keymap {
        compatible = "zmk,keymap";

        default {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp PLUS                             &kp Q               &kp W           &kp E               &kp R             &kp T        &kp Y    &kp U              &kp I               &kp O            &kp P                        &kp EQUAL
&mt LS(LA(LC(LEFT_COMMAND))) ESCAPE  &mt LEFT_CONTROL A  &mt LEFT_ALT S  &mt LEFT_COMMAND D  &mt LEFT_SHIFT F  &kp G        &kp H    &mt RIGHT_SHIFT J  &mt LEFT_COMMAND K  &mt RIGHT_ALT L  &mt RIGHT_CONTROL SEMICOLON  &kp SQT
&kp MINUS                            &kp Z               &kp X           &kp C               &kp V             &kp B        &kp N    &kp M              &kp COMMA           &kp DOT          &kp FSLH                     &kp UNDER
                                                                         &kp BACKSPACE       &mo 1             &kp SPACE    &kp RET  &mo 2              &kp TAB
            >;
        };

        lower {
            bindings = <
&trans  &kp N1    &kp N2  &kp N3         &kp N4            &kp N5            &kp N6           &kp N7             &kp N8         &kp N9                &kp N0                 &trans
&trans  &kp EXCL  &kp AT  &kp POUND      &kp DOLLAR        &kp PERCENT       &kp CARET        &kp AMPERSAND      &kp ASTRK      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp GRAVE
&trans  &trans    &trans  &kp LS(POUND)  &kp LEFT_BRACKET  &kp LEFT_BRACE    &kp RIGHT_BRACE  &kp RIGHT_BRACKET  &kp BACKSLASH  &kp PIPE              &kp TILDE              &trans
                          &trans         &trans            &trans            &trans           &trans             &trans
            >;
        };

        raise {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&bt BT_CLR  &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2                       &bt BT_SEL 3     &bt BT_SEL 4       &trans    &trans    &trans  &trans     &trans  &trans
&bt BT_CLR  &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2                       &bt BT_SEL 3     &bt BT_SEL 4       &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans  &trans
&trans      &rgb_ug RGB_BRD  &rgb_ug RGB_BRI  &rgb_ug RGB_COLOR_HSB(184,100,50)  &rgb_ug RGB_EFF  &rgb_ug RGB_TOG    &trans    &trans    &trans  &trans     &trans  &to 3
                                              &trans                             &trans           &trans             &trans    &trans    &trans
            >;
        };

        gaming {
            bindings = <
&kp ESCAPE      &trans  &trans  &trans        &trans     &trans              &trans  &trans  &trans  &trans  &trans         &trans
&kp TAB         &kp A   &kp S   &kp D         &kp F      &kp G               &kp H   &kp J   &kp K   &kp L   &kp SEMICOLON  &trans
&kp LEFT_SHIFT  &trans  &trans  &trans        &trans     &trans              &trans  &trans  &trans  &trans  &trans         &to 0
                                &kp LEFT_ALT  &kp SPACE  &kp LEFT_COMMAND    &trans  &mo 1   &mo 2
            >;
        };
    };
};
