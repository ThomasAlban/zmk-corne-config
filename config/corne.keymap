#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        bspc_del: bspc_del {
            compatible = "zmk,behavior-mod-morph";
            label = "BSPC_DEL";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&kp DEL>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        comma_excl: comma_excl {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_EXCL";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp EXCLAMATION>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_qmark: dot_qmark {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_QMARK";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp QUESTION>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;
        };

        slh_morph: slh_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "SLH_MORPH";
            bindings = <&kp SLASH>, <&kp BACKSLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        kp_bspc: kp_bspc {
            compatible = "zmk,behavior-hold-tap";
            label = "KP_BSPC";
            bindings = <&kp>, <&bspc_del>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        lt_hpref: lt_hpref {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_HPREF";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        d_acc: d_acc {
            compatible = "zmk,behavior-tap-dance";
            label = "D_ACC";
            #binding-cells = <0>;
            bindings = <&kp LBKT>, <&kp SQT>, <&kp LBRC>, <&kp DQT>;
        };

        d_stac: d_stac {
            compatible = "zmk,behavior-tap-dance";
            label = "D_STAC";
            #binding-cells = <0>;
            bindings = <&kp RBKT>, <&kp BSLH>, <&kp RBRC>, <&kp PIPE>;
        };

        d_slr: d_slr {
            compatible = "zmk,behavior-tap-dance";
            label = "D_SLR";
            #binding-cells = <0>;
            bindings = <&kp S>, <&kp T>;
        };

        d_spc: d_spc {
            compatible = "zmk,behavior-tap-dance";
            label = "D_SPC";
            #binding-cells = <0>;
            bindings = <&kp SPACE>, <&kp P>;

            tapping-term-ms = <300>;
        };

        d_mt: d_mt {
            compatible = "zmk,behavior-hold-tap";
            label = "D_MT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            hold-while-undecided;
            quick-tap-ms = <150>;
        };

        d_shft_spc: d_shft_spc {
            compatible = "zmk,behavior-hold-tap";
            label = "D_SHFT_SPC";
            bindings = <&kp>, <&d_spc>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            hold-while-undecided;
        };

        h_rpt: h_rpt {
            compatible = "zmk,behavior-hold-tap";
            label = "H_RPT";
            bindings = <&kp>, <&key_repeat>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        func_layer {
            if-layers = <5 6>;
            then-layer = <7>;
        };
    };

    macros {
        email: email {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp T &kp H &kp O &kp M &kp A &kp S &kp A &kp L &kp B &kp A &kp N &kp M &kp U &kp S &kp I &kp C &kp AT &kp G &kp M &kp A &kp I &kp L &kp DOT &kp C &kp O &kp M>;
            label = "EMAIL";
        };

        email2: email2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp A &kp L &kp B &kp A &kp N &kp DOT &kp T &kp C &kp AT &kp O &kp U &kp N &kp D &kp L &kp E &kp S &kp C &kp H &kp O &kp O &kp L &kp DOT &kp O &kp R &kp G &kp DOT &kp U &kp K>;
            label = "EMAIL2";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            label = "Base";
            bindings = <
&kp PLUS                  &kp Q         &kp W        &kp F          &kp P            &kp B              &kp J      &kp L              &kp U            &kp Y        &slh_morph    &kp STAR
&mt LS(LA(LC(LGUI))) ESC  &hml LCTRL A  &hml LALT R  &hml LCMD S    &kp T            &kp G              &kp M      &kp N              &hmr RCMD E      &hmr RALT I  &hmr LCTRL O  &kp APOS
&kp MINUS                 &kp Z         &kp X        &kp C          &kp D            &kp V              &kp K      &kp H              &comma_excl      &dot_qmark   &kp SEMI      &kp EQUAL
                                                     &h_rpt LCMD 0  &lt_hpref 5 TAB  &mt LSHFT SPACE    &bspc_del  &lt_hpref 6 ENTER  &mt RSHFT UNDER
            >;
        };

        Qwerty {
            label = "Qwerty";
            bindings = <
&trans  &kp Q         &kp W        &kp E        &kp R   &kp T     &kp Y   &kp U   &kp I        &kp O        &kp P       &trans
&trans  &hml LCTRL A  &hml LALT S  &hml LCMD D  &kp F   &kp G     &kp H   &kp J   &hmr RGUI K  &hmr RALT L  &slh_morph  &trans
&trans  &kp Z         &kp X        &kp C        &kp V   &kp B     &kp N   &kp M   &trans       &trans       &trans      &trans
                                   &trans       &trans  &trans    &trans  &trans  &trans
            >;
        };

        Game {
            label = "Game";
            bindings = <
&kp ESC    &kp Q  &kp W  &kp E     &kp R      &kp T       &kp Y    &kp U      &kp I      &kp O    &kp P     &to 0
&kp TAB    &kp A  &kp S  &kp D     &kp F      &kp G       &kp H    &kp J      &kp K      &kp L    &kp SEMI  &mo 5
&kp LSHFT  &kp Z  &kp X  &kp C     &kp V      &kp B       &kp N    &kp M      &kp COMMA  &kp DOT  &kp FSLH  &mo 6
                         &kp LALT  &kp SPACE  &kp LCMD    &kp RET  &bspc_del  &kp LCTRL
            >;
        };

        Dorico {
            bindings = <
&d_stac  &kp Q           &kp LG(X)      &kp LG(C)      &kp LG(V)  &kp BSPC               &kp LT     &kp P         &kp M         &kp F       &kp GT         &to 0
&d_slr   &d_mt LCTRL N4  &d_mt LALT N5  &d_mt LCMD N6  &kp N7     &kp N8                 &kp LS(D)  &kp LEFT      &kp DOWN      &kp UP      &kp RIGHT      &mo 4
&d_acc   &kp DOT         &kp N0         &kp MINUS      &kp EQUAL  &kp LG(S)              &none      &kp LA(LEFT)  &kp LA(DOWN)  &kp LA(UP)  &kp LA(RIGHT)  &none
                                        &kp LG(Z)      &kp LS(N)  &d_shft_spc LSHFT 0    &bspc_del  &kp ENTER     &none
            >;

            label = "Dorico";
        };

        Dorico2 {
            label = "Dorico2";
            bindings = <
&kp PLUS   &kp Q         &kp W        &kp F        &kp P            &kp B              &kp J      &kp L              &kp U              &kp Y        &slh_morph    &none
&kp ESC    &hml LCTRL A  &hml LALT R  &hml LCMD S  &kp T            &kp G              &kp M      &kp N              &hmr RCMD E        &hmr RALT I  &hmr LCTRL O  &trans
&kp MINUS  &kp Z         &kp X        &kp C        &kp D            &kp V              &kp K      &kp H              &comma_excl        &dot_qmark   &kp SEMI      &none
                                      &kp LCMD     &lt_hpref 5 TAB  &mt LSHFT SPACE    &bspc_del  &lt_hpref 6 ENTER  &kp LS(LA(SPACE))
            >;
        };

        Sym {
            label = "Sym";
            bindings = <
&none  &none      &kp LESS_THAN  &kp GREATER_THAN  &kp PIPE   &kp GRAVE      &kp TILDE   &kp AMPS   &kp LBKT  &kp RBKT  &none       &none
&none  &kp EXCL   &kp MINUS      &kp PLUS          &kp EQUAL  &kp LA(N3)     &kp AT      &kp COLON  &kp LPAR  &kp RPAR  &kp QMARK   &none
&none  &kp CARET  &kp SLASH      &kp STAR          &kp BSLH   &kp PERCENT    &kp LA(N2)  &kp HASH   &kp LBRC  &kp RBRC  &kp DOLLAR  &none
                                 &trans            &trans     &trans         &trans      &trans     &trans
            >;
        };

        Nav {
            label = "Nav";
            bindings = <
&none  &kp SLASH  &kp N7  &kp N8  &kp N9  &kp STAR    &email2  &sk RSHFT  &sk RCMD   &sk RALT   &sk RCTRL  &none
&none  &kp MINUS  &kp N4  &kp N5  &kp N6  &kp PLUS    &email   &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT  &none
&none  &kp CARET  &kp N1  &kp N2  &kp N3  &kp DOT     &none    &kp HOME   &kp PG_DN  &kp PG_UP  &kp END    &none
                          &trans  &none   &kp N0      &trans   &trans     &trans
            >;
        };

        Func {
            label = "Func";
            bindings = <
&none  &kp F9  &kp F10  &kp F11  &kp F12  &tog 3    &none   &kp C_VOL_UP  &kp C_NEXT        &kp C_BRI_UP       &bt BT_NXT  &none
&none  &kp F5  &kp F6   &kp F7   &kp F8   &tog 2    &tog 1  &kp C_VOL_DN  &kp C_PLAY_PAUSE  &kp C_BRI_DN       &bt BT_PRV  &none
&none  &kp F1  &kp F2   &kp F3   &kp F4   &none     &none   &kp C_MUTE    &kp C_PREV        &ext_power EP_TOG  &bt BT_CLR  &none
                        &trans   &trans   &trans    &trans  &trans        &trans
            >;
        };
    };
};
